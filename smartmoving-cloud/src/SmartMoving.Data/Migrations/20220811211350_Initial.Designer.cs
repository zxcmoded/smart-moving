// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartMoving.Data.Contexts;

namespace SmartMoving.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220811211350_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","Security");
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Core.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("CreatedAtUtc");

                    b.Property<string>("CustomerPortalUrl")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(10);

                    b.Property<string>("SmsNumber")
                        .HasMaxLength(20);

                    b.Property<string>("WebsiteAddress")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches","Core");
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Core.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAtUtc");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'USD'")
                        .HasMaxLength(10);

                    b.Property<string>("CustomerPortalUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("IanaTzdbTimeZone")
                        .HasMaxLength(100);

                    b.Property<bool>("IsEnabled")
                        .HasDefaultValue(true);

                    b.Property<string>("LogoDisplay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'Landscape'")
                        .HasMaxLength(50);

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(10);

                    b.Property<string>("RandomId")
                        .HasMaxLength(20);

                    b.Property<string>("SmsNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("StateLicenseNumber")
                        .HasMaxLength(250);

                    b.Property<string>("WebsiteAddress")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Companies","Core");
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Core.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTimeOffset>("CreatedAtUtc");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<bool>("HasAccount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneType")
                        .HasMaxLength(20);

                    b.Property<string>("SecondaryPhoneNumbers")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'[]'")
                        .HasMaxLength(1000);

                    b.Property<string>("SecondaryPhoneNumbersIndex")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Customers","Core");
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Logging.ApplicationLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Host")
                        .HasMaxLength(50);

                    b.Property<string>("Message");

                    b.Property<string>("RequestId")
                        .HasMaxLength(60);

                    b.Property<string>("SessionId")
                        .HasMaxLength(60);

                    b.Property<string>("Source")
                        .HasMaxLength(300);

                    b.Property<string>("StackTrace");

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.Property<string>("UserName")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs","Logging");
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Security.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("Permissions");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedName")
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles","Security");
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Security.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<Guid?>("BranchId");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreatedAtUtc");

                    b.Property<bool>("Deactivated");

                    b.Property<DateTimeOffset?>("DeactivatedAtUtc");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("HireDate");

                    b.Property<string>("LastLoggedInAppVersion");

                    b.Property<DateTimeOffset?>("LastLoggedInAt");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("TerminationDate");

                    b.Property<string>("Title");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Security.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Security.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Security.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Security.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartMoving.Core.Data.Security.AppUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Security.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Core.Branch", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Core.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("SmartMoving.Core.Data.Core.BranchAddress", "DispatchLocation", b1 =>
                        {
                            b1.Property<Guid>("BranchId");

                            b1.Property<string>("City")
                                .HasMaxLength(100);

                            b1.Property<string>("FullAddress")
                                .HasMaxLength(500);

                            b1.Property<decimal>("Lat")
                                .HasColumnType("decimal(10,7)");

                            b1.Property<decimal>("Lng")
                                .HasColumnType("decimal(10,7)");

                            b1.Property<string>("State")
                                .HasMaxLength(100);

                            b1.Property<string>("Street")
                                .HasMaxLength(100);

                            b1.Property<string>("Unit")
                                .HasMaxLength(100);

                            b1.Property<string>("Zip")
                                .HasMaxLength(100);

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches","Core");

                            b1.HasOne("SmartMoving.Core.Data.Core.Branch")
                                .WithOne("DispatchLocation")
                                .HasForeignKey("SmartMoving.Core.Data.Core.BranchAddress", "BranchId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartMoving.Core.Data.Core.Address", "MailingAddress", b1 =>
                        {
                            b1.Property<Guid>("BranchId");

                            b1.Property<string>("City")
                                .HasMaxLength(100);

                            b1.Property<string>("State")
                                .HasMaxLength(100);

                            b1.Property<string>("Street")
                                .HasMaxLength(100);

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(100);

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches","Core");

                            b1.HasOne("SmartMoving.Core.Data.Core.Branch")
                                .WithOne("MailingAddress")
                                .HasForeignKey("SmartMoving.Core.Data.Core.Address", "BranchId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartMoving.Core.Data.Core.CompanySettingTypes.SocialMediaSettings", "SocialMediaSettings", b1 =>
                        {
                            b1.Property<Guid>("BranchId");

                            b1.Property<string>("AngiesListUrl");

                            b1.Property<string>("FacebookUrl");

                            b1.Property<string>("GoogleUrl");

                            b1.Property<string>("YelpUrl");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches","Core");

                            b1.HasOne("SmartMoving.Core.Data.Core.Branch")
                                .WithOne("SocialMediaSettings")
                                .HasForeignKey("SmartMoving.Core.Data.Core.CompanySettingTypes.SocialMediaSettings", "BranchId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Core.Company", b =>
                {
                    b.OwnsOne("SmartMoving.Core.Data.Core.CompanySettingTypes.CompanyEmailSettings", "EmailSettings", b1 =>
                        {
                            b1.Property<Guid>("CompanyId");

                            b1.Property<string>("BackgroundColor")
                                .HasMaxLength(10);

                            b1.Property<string>("FontColor")
                                .HasMaxLength(10);

                            b1.Property<string>("Footer");

                            b1.Property<string>("InboundAddress")
                                .HasMaxLength(100);

                            b1.Property<string>("PostmarkServerKey")
                                .HasMaxLength(100);

                            b1.Property<string>("SystemEmailFromAddress")
                                .HasMaxLength(100);

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies","Core");

                            b1.HasOne("SmartMoving.Core.Data.Core.Company")
                                .WithOne("EmailSettings")
                                .HasForeignKey("SmartMoving.Core.Data.Core.CompanySettingTypes.CompanyEmailSettings", "CompanyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartMoving.Core.Data.Core.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId");

                            b1.Property<string>("City")
                                .HasMaxLength(100);

                            b1.Property<string>("State")
                                .HasMaxLength(100);

                            b1.Property<string>("Street")
                                .HasMaxLength(100);

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(100);

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies","Core");

                            b1.HasOne("SmartMoving.Core.Data.Core.Company")
                                .WithOne("Address")
                                .HasForeignKey("SmartMoving.Core.Data.Core.Address", "CompanyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartMoving.Core.Data.Core.CompanySettingTypes.SocialMediaSettings", "SocialMediaSettings", b1 =>
                        {
                            b1.Property<Guid>("CompanyId");

                            b1.Property<string>("AngiesListUrl");

                            b1.Property<string>("FacebookUrl");

                            b1.Property<string>("GoogleUrl");

                            b1.Property<string>("YelpUrl");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies","Core");

                            b1.HasOne("SmartMoving.Core.Data.Core.Company")
                                .WithOne("SocialMediaSettings")
                                .HasForeignKey("SmartMoving.Core.Data.Core.CompanySettingTypes.SocialMediaSettings", "CompanyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Core.Customer", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Core.Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartMoving.Core.Data.Security.AppUser", b =>
                {
                    b.HasOne("SmartMoving.Core.Data.Core.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMoving.Core.Data.Core.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
